name: CI/CD with Docker & Kubernetes

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend linter
        run: npm run lint
        continue-on-error: true

      - name: Run frontend tests
        run: npm test -- --run

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests (if any)
        working-directory: ./backend
        run: npm test || echo "No backend tests yet"
        continue-on-error: true

  build-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging (Optional)
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl (example with kubeconfig)
        run: |
          echo "Configure kubectl with your cluster credentials"
          # Example:
          # mkdir -p $HOME/.kube
          # echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to staging..."
          # kubectl apply -f k8s/namespace.yaml
          # kubectl apply -f k8s/application.yaml
          # kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }} -n tp2devops
          # kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }} -n tp2devops

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "Configure kubectl with your production cluster credentials"
          # mkdir -p $HOME/.kube
          # echo "${{ secrets.KUBE_CONFIG_PROD }}" > $HOME/.kube/config

      - name: Deploy observability stack (if not exists)
        run: |
          echo "Ensuring observability stack is deployed..."
          # kubectl apply -f k8s/namespace.yaml
          # kubectl apply -f k8s/otel-collector.yaml
          # kubectl apply -f k8s/prometheus-operator.yaml
          # kubectl apply -f k8s/loki-stack.yaml
          # kubectl apply -f k8s/tempo.yaml
          # kubectl apply -f k8s/grafana.yaml

      - name: Deploy application
        run: |
          echo "Deploying application to production..."
          # kubectl apply -f k8s/application.yaml
          # kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }} -n tp2devops
          # kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }} -n tp2devops

      - name: Wait for rollout
        run: |
          echo "Waiting for deployment to complete..."
          # kubectl rollout status deployment/backend -n tp2devops
          # kubectl rollout status deployment/frontend -n tp2devops

      - name: Smoke tests
        run: |
          echo "Running smoke tests..."
          # kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never -- \
          #   curl -f http://backend.tp2devops.svc.cluster.local:3000/health

